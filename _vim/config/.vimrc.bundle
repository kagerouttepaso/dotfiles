if has('vim_starting')
  set nocompatible               " Be iMproved
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Recommended to install
" After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f your_machines_makefile

" NERD_commenter.vim :最強コメント処理 (<Leader>c<space>でコメントをトグル)
"NeoBundle 'scrooloose/nerdcommenter.git'

" 自動閉じタグ
" NeoBundle 'yuroyoro/vim-autoclose'

" -- でメソッドチェーン整形
"NeoBundle 'c9s/cascading.vim'


" Align : 高機能整形・桁揃えプラグイン
"NeoBundle 'Align'

" フィルタリングと整形
"NeoBundle 'godlygeek/tabular'

" マルチバイト対応の整形
NeoBundle 'h1mesuke/vim-alignta'


" undo履歴を追える (need python support)
"NeoBundle 'Gundo'

" surround.vim : テキストを括弧で囲む／削除する
"NeoBundle 'tpope/surround.vim'

" smartchr.vim : ==などの前後を整形
"NeoBundle 'smartchr'

" vim-operator-user : 簡単にoperatorを定義できるようにする
"NeoBundle 'operator-user'

" operator-camelize : camel-caseへの変換
"NeoBundle 'operator-camelize'

" operator-replace : yankしたものでreplaceする
"NeoBundle 'operator-replace'

" textobj-user : 簡単にVimエディタのテキストオブジェクトをつくれる
"NeoBundle 'textobj-user'

" vim-textobj-syntax : syntax hilightされたものをtext-objectに
"NeoBundle 'kana/vim-textobj-syntax.git'

" vim-textobj-plugins : いろんなものをtext-objectにする
"NeoBundle 'thinca/vim-textobj-plugins.git'

" vim-textobj-lastpat : 最後に検索されたパターンをtext-objectに
"NeoBundle 'kana/vim-textobj-lastpat.git'

" vim-textobj-indent : インデントされたものをtext-objectに
"NeoBundle 'kana/vim-textobj-indent.git'

" vim-textobj-function : 関数の中身をtext-objectに
"NeoBundle 'kana/vim-textobj-function.git'

" vim-textobj-fold : 折りたたまれたアレをtext-objectに
" NeoBundle 'kana/vim-textobj-fold.git'
"NeoBundle 'textobj-rubyblock'

" vim-textobj-entire : buffer全体をtext-objectに
"NeoBundle 'textobj-entire'

" 「foo」 or 【bar】などをtext-objectに
"NeoBundle 'textobj-jabraces'

" 改造したmonday.vim
NeoBundle 'kagerouttepaso/monday'

" <C-a>でtrue/false切替。他色々
"NeoBundle 'taku-o/vim-toggle'

" Completion {{{
  " 補完 neocomplcache.vim : 究極のVim的補完環境
  function! s:meet_neocomplete_requirements()
    return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
  endfunction

  if s:meet_neocomplete_requirements()
    NeoBundle 'Shougo/neocomplete.vim'
    NeoBundleFetch 'Shougo/neocomplcache.vim'
  else
    NeoBundleFetch 'Shougo/neocomplete.vim'
    NeoBundle 'Shougo/neocomplcache.vim'
  endif

  " neocomplcacheのsinpet補完
  NeoBundle 'Shougo/neosnippet.vim'
  NeoBundle 'Shougo/neosnippet-snippets'


  "snipetのテンプレート集
  "NeoBundle 'honza/vim-snippets'

  " for rsense
  "NeoBundle 'm2ym/rsense'
  "NeoBundle 'taichouchou2/vim-rsense'

  " rubyでrequire先を補完する
  " NeoBundle 'ujihisa/neco-ruby'

  " A neocomplcache plugin for English, using look command
  " NeoBundle 'ujihisa/neco-look'
" }}}

" Searching/Moving{{{
  " smooth_scroll.vim : スクロールを賢く
  "NeoBundle 'Smooth-Scroll'

  " vim-smartword : 単語移動がスマートな感じで
  "NeoBundle 'smartword'

  " camelcasemotion : CamelCaseやsnake_case単位でのワード移動
  "NeoBundle 'camelcasemotion'

  " <Leader><Leader>w/fなどで、motion先をhilightする
  "NeoBundle 'EasyMotion'

  " matchit.vim : 「%」による対応括弧へのカーソル移動機能を拡張
  "NeoBundle 'matchit.zip'

  " ruby用のmatchit拡張
  "NeoBundle 'ruby-matchit'

  " grep.vim : 外部のgrep利用。:Grepで対話形式でgrep :Rgrepは再帰
  NeoBundle 'grep.vim'

  " eregex.vim : vimの正規表現をrubyやperlの正規表現な入力でできる :%S/perlregex/
  "NeoBundle 'eregex.vim'

  " open-browser.vim : カーソルの下のURLを開くor単語を検索エンジンで検索
  NeoBundle 'tyru/open-browser.vim'

" }}}

" Programming {{{
  " quickrun.vim : 編集中のファイルを簡単に実行できるプラグイン
  NeoBundle 'thinca/vim-quickrun'

  " perldocやphpmanual等のリファレンスをvim上で見る
  "NeoBundle 'thinca/vim-ref'

  " SQLUtilities : SQL整形、生成ユーティリティ
  "NeoBundle 'SQLUtilities'

  " vim-ruby : VimでRubyを扱う際の最も基本的な拡張機能
  NeoBundle 'vim-ruby/vim-ruby'


  " rails.vim : rails的なアレ
  "NeoBundle 'tpope/vim-rails'

  " Pydiction : Python用の入力補完
  "NeoBundle 'Pydiction'

  " ソースコード上のメソッド宣言、変数宣言の一覧を表示
  NeoBundle 'taglist.vim'

  " エラーがある場所をhilight
  "NeoBundle 'errormarker.vim'

  " tagsを利用したソースコード閲覧・移動補助機能 tagsファイルの自動生成
   NeoBundle 'SrcExpl'

  " NERD_tree, taglist, srcexpl の統合
  NeoBundle 'Trinity'

  " NERDTree : ツリー型エクスプローラ
  "NeoBundle 'The-NERD-tree'

  " vtreeexplorer.vim : ツリー状にファイルやディレクトリの一覧を表示
  NeoBundle 'vtreeexplorer'
" }}}

" Syntax {{{
  " haml
  NeoBundle 'haml.zip'

  " JavaScript
  NeoBundle 'JavaScript-syntax'

  " jQuery
  NeoBundle 'jQuery'

  " nginx conf
  NeoBundle 'nginx.vim'

  " markdown
  NeoBundle 'tpope/vim-markdown'

  " coffee script
  NeoBundle 'kchmck/vim-coffee-script'

  " python
  NeoBundle 'yuroyoro/vim-python'

  " scala
  NeoBundle 'yuroyoro/vim-scala'

  " clojure
  NeoBundle 'jondistad/vimclojure'

  " ghc-mod
  NeoBundle 'eagletmt/ghcmod-vim'

  " textile
  NeoBundle 'kagerouttepaso/textile.vim'

  " syntax checking plugins exist for eruby, haml, html, javascript, php, python, ruby and sass.
  "NeoBundle 'scrooloose/syntastic'
" }}}

" Buffer {{{
  " DumbBuf.vim : quickbufっぽくbufferを管理。 "<Leader>b<Space>でBufferList
  "NeoBundle 'DumbBuf'

  " minibufexpl.vim : タブエディタ風にバッファ管理ウィンドウを表示
  "NeoBundle 'minibufexpl.vim'

  " buftabs.vim : ステータスバーにバッファ一覧を表示
  "NeoBundle 'buftabs'

  "  Kwbd.vim : レイアウトを崩さずにバッファを削除
  NeoBundle 'rgarver/Kwbd.vim'
" }}}

" Encording {{{
  NeoBundle 'banyan/recognize_charcode.vim'
" }}}

" Utility {{{

  " vimshell : vimのshell
  NeoBundle 'Shougo/vimshell.git'
  let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
  "let g:vimshell_right_prompt = 'vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'

  if has('win32') || has('win64')
    " Display user name on Windows.
    let g:vimshell_prompt = $USERNAME."% "
  else
    " Display user name on Linux.
    let g:vimshell_prompt = $USER."% "
  endif

  " Initialize execute file list.
  let g:vimshell_execute_file_list = {}
  let g:vimshell_execute_file_list['rb'] = 'ruby'
  let g:vimshell_execute_file_list['pl'] = 'perl'
  let g:vimshell_execute_file_list['py'] = 'python'
  call vimshell#set_execute_file('txt,vim,c,h,cpp,d,xml,java', 'vim')
  call vimshell#set_execute_file('html,xhtml', 'gexe chrome')

  autocmd FileType vimshell
        \| call vimshell#hook#add('chpwd', 'my_chpwd', 'g:my_chpwd')

  function! g:my_chpwd(args, context)
  "  call vimshell#execute('ls')
  endfunction

  autocmd FileType int-* call s:interactive_settings()
  function! s:interactive_settings()
  endfunction

  " vimfiler : vimのファイラ
  NeoBundle 'Shougo/vimfiler'

  " vimproc : vimから非同期実行。vimshelleで必要
  NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }

  " vim-altercmd : Ex command拡張
  "NeoBundle 'tyru/vim-altercmd'

  " vim Interface to Web API
  "NeoBundle 'mattn/webapi-vim'

  " cecutil.vim : 他のpluginのためのutillity1
  "NeoBundle 'cecutil'

  " urilib.vim : vim scriptからURLを扱うライブラリ
  "NeoBundle 'tyru/urilib.vim'

  " ステータスラインに顔文字を表示
  " NeoBundle 'mattn/hahhah-vim'

  " utillity
  "NeoBundle 'L9'

  " Buffer管理のLibrary
  "NeoBundle 'thinca/vim-openbuf'

  " vimdoc 日本語
  "NeoBundle 'yuroyoro/vimdoc_ja'

  " vim上のtwitter client
  "NeoBundle 'TwitVim'

  " Lingrのclient
  "NeoBundle 'tsukkee/lingr-vim'

  " vimからGit操作する
  NeoBundle 'tpope/vim-fugitive'

  " tigよりすごいgitk的なもの
  NeoBundle 'gregsexton/gitv'

  " ステータスラインをカッコよくする
  " NeoBundle 'Lokaltog/vim-powerline'

  " Redmine on Vim
  "NeoBundle 'mattn/vim-metarw-redmine'

  " A framework to read/write fake:path
  "NeoBundle 'kana/vim-metarw'

  " https://github.com/airblade/vim-gitgutter
  NeoBundle 'sgur/vim-gitgutter'

  " Doxygenのサポーターらしい
  NeoBundle 'DoxygenToolkit.vim'

  " Doxygenのサポーターらしい
  "NeoBundle 'doxygen-support.vim'

  "テンプレートファイルを作成する
  NeoBundle 'kagerouttepaso/sonictemplate-vim'

  " yankround : 副作用のないYankRing
  NeoBundle 'LeafCage/yankround.vim'
  " 貼り付け文字列をハイライト
  let g:yankround_use_region_hl=1
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)

  " vim-over : かっちょいい置換
  NeoBundle 'osyo-manga/vim-over'
  " ssで置換開始
  vnoremap <silent>ss :OverCommandLine<CR>s///g<Left><Left><Left>
  nnoremap <silent>ss :OverCommandLine<CR>%s///g<Left><Left><Left>
  " swでカーソル以下の単語を置換
  nnoremap <silent>sw :OverCommandLine<CR>%s/<C-r><C-w>//g<Left><Left>
  " virtualモード中は選択した文章で置き換え
  vnoremap <silent>sw y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>
  " <C-l> を <C-f> に
  " <C-h> を <C-b> に割り当てる
  let g:over_command_line_key_mappings = {
  \  "\<C-l>" : "\<C-f>",
  \  "\<C-h>" : "\<C-b>",
  \}
" }}}

" ColorSchema{{{{
  " color schema 256
  "NeoBundle 'desert256.vim'
  "NeoBundle 'mrkn256.vim'
  "NeoBundle 'tomasr/molokai'
  NeoBundle 'yuroyoro/yuroyoro256.vim'
  NeoBundle 'chriskempson/tomorrow-theme'
" }}}

" Unite {{{{
  " unite.vim : - すべてを破壊し、すべてを繋げ - vim scriptで実装されたanythingプラグイン
  NeoBundle 'Shougo/unite.vim'
  NeoBundle 'Shougo/unite-build'
  "NeoBundle 'tsukkee/unite-help'
  NeoBundle 'Shougo/unite-outline'
  "NeoBundle 'basyura/unite-rails'
  "NeoBundle 'thinca/vim-unite-history'
  NeoBundle 'tsukkee/unite-tag'
  "NeoBundle 'choplin/unite-vim_hacks'

" }}}

" gvim  {{{{
  " Gvim上でフォントのサイズを変更する
  NeoBundle 'thinca/vim-fontzoom'
" }}}

" windows {{{{
if has("win32") || has("win64")
  " Uniteでeverythingの呼び出す
  NeoBundle 'sgur/unite-everything'
  "フルパスでソート
  let g:unite_source_everything_sort_by_full_path=1
  "サーチ対象はフルパス
  let g:unite_source_everything_full_path_search=1
endif
" }}}





filetype plugin indent on     " Required!
"
" Brief help
" :NeoBundleList          - list configured bundles
" :NeoBundleInstall(!)    - install(update) bundles
" :NeoBundleClean(!)      - confirm(or auto-approve) removal of unused bundles

" Installation check.
NeoBundleCheck

" vim:set foldmethod=marker:
